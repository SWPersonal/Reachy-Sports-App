// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  participant: (where?: ParticipantWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  superStar: (where?: SuperStarWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  participant: (
    where: ParticipantWhereUniqueInput
  ) => ParticipantNullablePromise;
  participants: (args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Participant>;
  participantsConnection: (args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ParticipantConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  superStar: (where: SuperStarWhereUniqueInput) => SuperStarNullablePromise;
  superStars: (args?: {
    where?: SuperStarWhereInput;
    orderBy?: SuperStarOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SuperStar>;
  superStarsConnection: (args?: {
    where?: SuperStarWhereInput;
    orderBy?: SuperStarOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SuperStarConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createParticipant: (data: ParticipantCreateInput) => ParticipantPromise;
  updateParticipant: (args: {
    data: ParticipantUpdateInput;
    where: ParticipantWhereUniqueInput;
  }) => ParticipantPromise;
  updateManyParticipants: (args: {
    data: ParticipantUpdateManyMutationInput;
    where?: ParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertParticipant: (args: {
    where: ParticipantWhereUniqueInput;
    create: ParticipantCreateInput;
    update: ParticipantUpdateInput;
  }) => ParticipantPromise;
  deleteParticipant: (where: ParticipantWhereUniqueInput) => ParticipantPromise;
  deleteManyParticipants: (
    where?: ParticipantWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSuperStar: (data: SuperStarCreateInput) => SuperStarPromise;
  updateSuperStar: (args: {
    data: SuperStarUpdateInput;
    where: SuperStarWhereUniqueInput;
  }) => SuperStarPromise;
  updateManySuperStars: (args: {
    data: SuperStarUpdateManyMutationInput;
    where?: SuperStarWhereInput;
  }) => BatchPayloadPromise;
  upsertSuperStar: (args: {
    where: SuperStarWhereUniqueInput;
    create: SuperStarCreateInput;
    update: SuperStarUpdateInput;
  }) => SuperStarPromise;
  deleteSuperStar: (where: SuperStarWhereUniqueInput) => SuperStarPromise;
  deleteManySuperStars: (where?: SuperStarWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  participant: (
    where?: ParticipantSubscriptionWhereInput
  ) => ParticipantSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  superStar: (
    where?: SuperStarSubscriptionWhereInput
  ) => SuperStarSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission = "ADMIN" | "USER";

export type Category =
  | "FOOTBALL"
  | "GOLF"
  | "BASKETBALL"
  | "BOXING"
  | "TENNIS"
  | "ATHLETICS";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "description_ASC"
  | "description_DESC"
  | "category_ASC"
  | "category_DESC"
  | "isFeatured_ASC"
  | "isFeatured_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "groupId_ASC"
  | "groupId_DESC"
  | "groupName_ASC"
  | "groupName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "route_ASC"
  | "route_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SuperStarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullname_ASC"
  | "fullname_DESC"
  | "image_ASC"
  | "image_DESC"
  | "dateOfBirth_ASC"
  | "dateOfBirth_DESC"
  | "country_ASC"
  | "country_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "facebookID_ASC"
  | "facebookID_DESC"
  | "googleID_ASC"
  | "googleID_DESC"
  | "permission_ASC"
  | "permission_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  facebookID?: Maybe<String>;
  facebookID_not?: Maybe<String>;
  facebookID_in?: Maybe<String[] | String>;
  facebookID_not_in?: Maybe<String[] | String>;
  facebookID_lt?: Maybe<String>;
  facebookID_lte?: Maybe<String>;
  facebookID_gt?: Maybe<String>;
  facebookID_gte?: Maybe<String>;
  facebookID_contains?: Maybe<String>;
  facebookID_not_contains?: Maybe<String>;
  facebookID_starts_with?: Maybe<String>;
  facebookID_not_starts_with?: Maybe<String>;
  facebookID_ends_with?: Maybe<String>;
  facebookID_not_ends_with?: Maybe<String>;
  googleID?: Maybe<String>;
  googleID_not?: Maybe<String>;
  googleID_in?: Maybe<String[] | String>;
  googleID_not_in?: Maybe<String[] | String>;
  googleID_lt?: Maybe<String>;
  googleID_lte?: Maybe<String>;
  googleID_gt?: Maybe<String>;
  googleID_gte?: Maybe<String>;
  googleID_contains?: Maybe<String>;
  googleID_not_contains?: Maybe<String>;
  googleID_starts_with?: Maybe<String>;
  googleID_not_starts_with?: Maybe<String>;
  googleID_ends_with?: Maybe<String>;
  googleID_not_ends_with?: Maybe<String>;
  permission?: Maybe<Permission>;
  permission_not?: Maybe<Permission>;
  permission_in?: Maybe<Permission[] | Permission>;
  permission_not_in?: Maybe<Permission[] | Permission>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  groupParticipant_every?: Maybe<ParticipantWhereInput>;
  groupParticipant_some?: Maybe<ParticipantWhereInput>;
  groupParticipant_none?: Maybe<ParticipantWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  isFeatured?: Maybe<Boolean>;
  isFeatured_not?: Maybe<Boolean>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface ParticipantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  groupId?: Maybe<ID_Input>;
  groupId_not?: Maybe<ID_Input>;
  groupId_in?: Maybe<ID_Input[] | ID_Input>;
  groupId_not_in?: Maybe<ID_Input[] | ID_Input>;
  groupId_lt?: Maybe<ID_Input>;
  groupId_lte?: Maybe<ID_Input>;
  groupId_gt?: Maybe<ID_Input>;
  groupId_gte?: Maybe<ID_Input>;
  groupId_contains?: Maybe<ID_Input>;
  groupId_not_contains?: Maybe<ID_Input>;
  groupId_starts_with?: Maybe<ID_Input>;
  groupId_not_starts_with?: Maybe<ID_Input>;
  groupId_ends_with?: Maybe<ID_Input>;
  groupId_not_ends_with?: Maybe<ID_Input>;
  groupName?: Maybe<String>;
  groupName_not?: Maybe<String>;
  groupName_in?: Maybe<String[] | String>;
  groupName_not_in?: Maybe<String[] | String>;
  groupName_lt?: Maybe<String>;
  groupName_lte?: Maybe<String>;
  groupName_gt?: Maybe<String>;
  groupName_gte?: Maybe<String>;
  groupName_contains?: Maybe<String>;
  groupName_not_contains?: Maybe<String>;
  groupName_starts_with?: Maybe<String>;
  groupName_not_starts_with?: Maybe<String>;
  groupName_ends_with?: Maybe<String>;
  groupName_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ParticipantWhereInput[] | ParticipantWhereInput>;
  OR?: Maybe<ParticipantWhereInput[] | ParticipantWhereInput>;
  NOT?: Maybe<ParticipantWhereInput[] | ParticipantWhereInput>;
}

export interface MessageWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  group?: Maybe<GroupWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<Category>;
  name_not?: Maybe<Category>;
  name_in?: Maybe<Category[] | Category>;
  name_not_in?: Maybe<Category[] | Category>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  route?: Maybe<String>;
  route_not?: Maybe<String>;
  route_in?: Maybe<String[] | String>;
  route_not_in?: Maybe<String[] | String>;
  route_lt?: Maybe<String>;
  route_lte?: Maybe<String>;
  route_gt?: Maybe<String>;
  route_gte?: Maybe<String>;
  route_contains?: Maybe<String>;
  route_not_contains?: Maybe<String>;
  route_starts_with?: Maybe<String>;
  route_not_starts_with?: Maybe<String>;
  route_ends_with?: Maybe<String>;
  route_not_ends_with?: Maybe<String>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export type ParticipantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SuperStarWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SuperStarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fullname?: Maybe<String>;
  fullname_not?: Maybe<String>;
  fullname_in?: Maybe<String[] | String>;
  fullname_not_in?: Maybe<String[] | String>;
  fullname_lt?: Maybe<String>;
  fullname_lte?: Maybe<String>;
  fullname_gt?: Maybe<String>;
  fullname_gte?: Maybe<String>;
  fullname_contains?: Maybe<String>;
  fullname_not_contains?: Maybe<String>;
  fullname_starts_with?: Maybe<String>;
  fullname_not_starts_with?: Maybe<String>;
  fullname_ends_with?: Maybe<String>;
  fullname_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  dateOfBirth_not?: Maybe<String>;
  dateOfBirth_in?: Maybe<String[] | String>;
  dateOfBirth_not_in?: Maybe<String[] | String>;
  dateOfBirth_lt?: Maybe<String>;
  dateOfBirth_lte?: Maybe<String>;
  dateOfBirth_gt?: Maybe<String>;
  dateOfBirth_gte?: Maybe<String>;
  dateOfBirth_contains?: Maybe<String>;
  dateOfBirth_not_contains?: Maybe<String>;
  dateOfBirth_starts_with?: Maybe<String>;
  dateOfBirth_not_starts_with?: Maybe<String>;
  dateOfBirth_ends_with?: Maybe<String>;
  dateOfBirth_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuperStarWhereInput[] | SuperStarWhereInput>;
  OR?: Maybe<SuperStarWhereInput[] | SuperStarWhereInput>;
  NOT?: Maybe<SuperStarWhereInput[] | SuperStarWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantCreateManyWithoutUserInput>;
  messages?: Maybe<MessageCreateManyWithoutUserInput>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  image: String;
  caption: String;
  description: String;
  category: Category;
  isFeatured?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
}

export interface ParticipantCreateManyWithoutUserInput {
  create?: Maybe<
    ParticipantCreateWithoutUserInput[] | ParticipantCreateWithoutUserInput
  >;
  connect?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
}

export interface ParticipantCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  groupId: ID_Input;
  groupName: String;
}

export interface MessageCreateManyWithoutUserInput {
  create?: Maybe<
    MessageCreateWithoutUserInput[] | MessageCreateWithoutUserInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutUserInput {
  _id?: Maybe<ID_Input>;
  text: String;
  group: GroupCreateOneWithoutMessagesInput;
}

export interface GroupCreateOneWithoutMessagesInput {
  create?: Maybe<GroupCreateWithoutMessagesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  name: Category;
  title: String;
  icon?: Maybe<String>;
  route: String;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  image: String;
  caption: String;
  description: String;
  category: Category;
  isFeatured?: Maybe<Boolean>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantCreateManyWithoutUserInput>;
  messages?: Maybe<MessageCreateManyWithoutUserInput>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantUpdateManyWithoutUserInput>;
  messages?: Maybe<MessageUpdateManyWithoutUserInput>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  image?: Maybe<String>;
  caption?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<Category>;
  isFeatured?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<Category>;
  category_not?: Maybe<Category>;
  category_in?: Maybe<Category[] | Category>;
  category_not_in?: Maybe<Category[] | Category>;
  isFeatured?: Maybe<Boolean>;
  isFeatured_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  image?: Maybe<String>;
  caption?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<Category>;
  isFeatured?: Maybe<Boolean>;
}

export interface ParticipantUpdateManyWithoutUserInput {
  create?: Maybe<
    ParticipantCreateWithoutUserInput[] | ParticipantCreateWithoutUserInput
  >;
  delete?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
  connect?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
  set?: Maybe<ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput>;
  disconnect?: Maybe<
    ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | ParticipantUpdateWithWhereUniqueWithoutUserInput[]
    | ParticipantUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ParticipantUpsertWithWhereUniqueWithoutUserInput[]
    | ParticipantUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ParticipantScalarWhereInput[] | ParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ParticipantUpdateManyWithWhereNestedInput[]
    | ParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface ParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ParticipantWhereUniqueInput;
  data: ParticipantUpdateWithoutUserDataInput;
}

export interface ParticipantUpdateWithoutUserDataInput {
  groupId?: Maybe<ID_Input>;
  groupName?: Maybe<String>;
}

export interface ParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ParticipantWhereUniqueInput;
  update: ParticipantUpdateWithoutUserDataInput;
  create: ParticipantCreateWithoutUserInput;
}

export interface ParticipantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  groupId?: Maybe<ID_Input>;
  groupId_not?: Maybe<ID_Input>;
  groupId_in?: Maybe<ID_Input[] | ID_Input>;
  groupId_not_in?: Maybe<ID_Input[] | ID_Input>;
  groupId_lt?: Maybe<ID_Input>;
  groupId_lte?: Maybe<ID_Input>;
  groupId_gt?: Maybe<ID_Input>;
  groupId_gte?: Maybe<ID_Input>;
  groupId_contains?: Maybe<ID_Input>;
  groupId_not_contains?: Maybe<ID_Input>;
  groupId_starts_with?: Maybe<ID_Input>;
  groupId_not_starts_with?: Maybe<ID_Input>;
  groupId_ends_with?: Maybe<ID_Input>;
  groupId_not_ends_with?: Maybe<ID_Input>;
  groupName?: Maybe<String>;
  groupName_not?: Maybe<String>;
  groupName_in?: Maybe<String[] | String>;
  groupName_not_in?: Maybe<String[] | String>;
  groupName_lt?: Maybe<String>;
  groupName_lte?: Maybe<String>;
  groupName_gt?: Maybe<String>;
  groupName_gte?: Maybe<String>;
  groupName_contains?: Maybe<String>;
  groupName_not_contains?: Maybe<String>;
  groupName_starts_with?: Maybe<String>;
  groupName_not_starts_with?: Maybe<String>;
  groupName_ends_with?: Maybe<String>;
  groupName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ParticipantScalarWhereInput[] | ParticipantScalarWhereInput>;
  OR?: Maybe<ParticipantScalarWhereInput[] | ParticipantScalarWhereInput>;
  NOT?: Maybe<ParticipantScalarWhereInput[] | ParticipantScalarWhereInput>;
}

export interface ParticipantUpdateManyWithWhereNestedInput {
  where: ParticipantScalarWhereInput;
  data: ParticipantUpdateManyDataInput;
}

export interface ParticipantUpdateManyDataInput {
  groupId?: Maybe<ID_Input>;
  groupName?: Maybe<String>;
}

export interface MessageUpdateManyWithoutUserInput {
  create?: Maybe<
    MessageCreateWithoutUserInput[] | MessageCreateWithoutUserInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutUserInput[]
    | MessageUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutUserInput[]
    | MessageUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutUserInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutUserDataInput;
}

export interface MessageUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  group?: Maybe<GroupUpdateOneRequiredWithoutMessagesInput>;
}

export interface GroupUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<GroupCreateWithoutMessagesInput>;
  update?: Maybe<GroupUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<GroupUpsertWithoutMessagesInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutMessagesDataInput {
  name?: Maybe<Category>;
  title?: Maybe<String>;
  icon?: Maybe<String>;
  route?: Maybe<String>;
}

export interface GroupUpsertWithoutMessagesInput {
  update: GroupUpdateWithoutMessagesDataInput;
  create: GroupCreateWithoutMessagesInput;
}

export interface MessageUpsertWithWhereUniqueWithoutUserInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutUserDataInput;
  create: MessageCreateWithoutUserInput;
}

export interface MessageScalarWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  image?: Maybe<String>;
  caption?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<Category>;
  isFeatured?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantUpdateManyWithoutUserInput>;
  messages?: Maybe<MessageUpdateManyWithoutUserInput>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  name: Category;
  title: String;
  icon?: Maybe<String>;
  route: String;
  messages?: Maybe<MessageCreateManyWithoutGroupInput>;
}

export interface MessageCreateManyWithoutGroupInput {
  create?: Maybe<
    MessageCreateWithoutGroupInput[] | MessageCreateWithoutGroupInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutGroupInput {
  _id?: Maybe<ID_Input>;
  text: String;
  user: UserCreateOneWithoutMessagesInput;
}

export interface UserCreateOneWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantCreateManyWithoutUserInput>;
}

export interface GroupUpdateInput {
  name?: Maybe<Category>;
  title?: Maybe<String>;
  icon?: Maybe<String>;
  route?: Maybe<String>;
  messages?: Maybe<MessageUpdateManyWithoutGroupInput>;
}

export interface MessageUpdateManyWithoutGroupInput {
  create?: Maybe<
    MessageCreateWithoutGroupInput[] | MessageCreateWithoutGroupInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutGroupInput[]
    | MessageUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutGroupInput[]
    | MessageUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutGroupInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutGroupDataInput;
}

export interface MessageUpdateWithoutGroupDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutMessagesInput>;
}

export interface UserUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  update?: Maybe<UserUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMessagesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput;
  create: UserCreateWithoutMessagesInput;
}

export interface MessageUpsertWithWhereUniqueWithoutGroupInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutGroupDataInput;
  create: MessageCreateWithoutGroupInput;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<Category>;
  title?: Maybe<String>;
  icon?: Maybe<String>;
  route?: Maybe<String>;
}

export interface MessageCreateInput {
  _id?: Maybe<ID_Input>;
  text: String;
  user: UserCreateOneWithoutMessagesInput;
  group: GroupCreateOneWithoutMessagesInput;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutMessagesInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutMessagesInput>;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface ParticipantCreateInput {
  id?: Maybe<ID_Input>;
  groupId: ID_Input;
  groupName: String;
  user: UserCreateOneWithoutGroupParticipantInput;
}

export interface UserCreateOneWithoutGroupParticipantInput {
  create?: Maybe<UserCreateWithoutGroupParticipantInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGroupParticipantInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  messages?: Maybe<MessageCreateManyWithoutUserInput>;
}

export interface ParticipantUpdateInput {
  groupId?: Maybe<ID_Input>;
  groupName?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutGroupParticipantInput>;
}

export interface UserUpdateOneRequiredWithoutGroupParticipantInput {
  create?: Maybe<UserCreateWithoutGroupParticipantInput>;
  update?: Maybe<UserUpdateWithoutGroupParticipantDataInput>;
  upsert?: Maybe<UserUpsertWithoutGroupParticipantInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGroupParticipantDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  messages?: Maybe<MessageUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutGroupParticipantInput {
  update: UserUpdateWithoutGroupParticipantDataInput;
  create: UserCreateWithoutGroupParticipantInput;
}

export interface ParticipantUpdateManyMutationInput {
  groupId?: Maybe<ID_Input>;
  groupName?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  image: String;
  caption: String;
  description: String;
  category: Category;
  isFeatured?: Maybe<Boolean>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
}

export interface PostUpdateInput {
  image?: Maybe<String>;
  caption?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<Category>;
  isFeatured?: Maybe<Boolean>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
}

export interface PostUpdateManyMutationInput {
  image?: Maybe<String>;
  caption?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<Category>;
  isFeatured?: Maybe<Boolean>;
}

export interface SuperStarCreateInput {
  id?: Maybe<ID_Input>;
  fullname: String;
  image: String;
  dateOfBirth?: Maybe<String>;
  country?: Maybe<String>;
  bio: String;
  category: Category;
}

export interface SuperStarUpdateInput {
  fullname?: Maybe<String>;
  image?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  country?: Maybe<String>;
  bio?: Maybe<String>;
  category?: Maybe<Category>;
}

export interface SuperStarUpdateManyMutationInput {
  fullname?: Maybe<String>;
  image?: Maybe<String>;
  dateOfBirth?: Maybe<String>;
  country?: Maybe<String>;
  bio?: Maybe<String>;
  category?: Maybe<Category>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantCreateManyWithoutUserInput>;
  messages?: Maybe<MessageCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  groupParticipant?: Maybe<ParticipantUpdateManyWithoutUserInput>;
  messages?: Maybe<MessageUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  avatar?: Maybe<String>;
  facebookID?: Maybe<String>;
  googleID?: Maybe<String>;
  permission?: Maybe<Permission>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface ParticipantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ParticipantWhereInput>;
  AND?: Maybe<
    ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput
  >;
  OR?: Maybe<
    ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface SuperStarSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SuperStarWhereInput>;
  AND?: Maybe<
    SuperStarSubscriptionWhereInput[] | SuperStarSubscriptionWhereInput
  >;
  OR?: Maybe<
    SuperStarSubscriptionWhereInput[] | SuperStarSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SuperStarSubscriptionWhereInput[] | SuperStarSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email?: String;
  avatar?: String;
  facebookID?: String;
  googleID?: String;
  permission?: Permission;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  avatar: () => Promise<String>;
  facebookID: () => Promise<String>;
  googleID: () => Promise<String>;
  permission: () => Promise<Permission>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupParticipant: <T = FragmentableArray<Participant>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  facebookID: () => Promise<AsyncIterator<String>>;
  googleID: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<Permission>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupParticipant: <
    T = Promise<AsyncIterator<ParticipantSubscription>>
  >(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  avatar: () => Promise<String>;
  facebookID: () => Promise<String>;
  googleID: () => Promise<String>;
  permission: () => Promise<Permission>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  groupParticipant: <T = FragmentableArray<Participant>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  image: String;
  caption: String;
  description: String;
  category: Category;
  isFeatured?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  caption: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<Category>;
  isFeatured: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Category>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  caption: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<Category>;
  isFeatured: () => Promise<Boolean>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Participant {
  id: ID_Output;
  groupId: ID_Output;
  groupName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ParticipantPromise extends Promise<Participant>, Fragmentable {
  id: () => Promise<ID_Output>;
  groupId: () => Promise<ID_Output>;
  groupName: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParticipantSubscription
  extends Promise<AsyncIterator<Participant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  groupId: () => Promise<AsyncIterator<ID_Output>>;
  groupName: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParticipantNullablePromise
  extends Promise<Participant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  groupId: () => Promise<ID_Output>;
  groupName: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Message {
  _id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  _id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  group: <T = GroupPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  group: <T = GroupSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  group: <T = GroupPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Group {
  id: ID_Output;
  name: Category;
  title: String;
  icon?: String;
  route: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Category>;
  title: () => Promise<String>;
  icon: () => Promise<String>;
  route: () => Promise<String>;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<Category>>;
  title: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  route: () => Promise<AsyncIterator<String>>;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Category>;
  title: () => Promise<String>;
  icon: () => Promise<String>;
  route: () => Promise<String>;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ParticipantConnection {
  pageInfo: PageInfo;
  edges: ParticipantEdge[];
}

export interface ParticipantConnectionPromise
  extends Promise<ParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ParticipantEdge>>() => T;
  aggregate: <T = AggregateParticipantPromise>() => T;
}

export interface ParticipantConnectionSubscription
  extends Promise<AsyncIterator<ParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParticipantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParticipantSubscription>() => T;
}

export interface ParticipantEdge {
  node: Participant;
  cursor: String;
}

export interface ParticipantEdgePromise
  extends Promise<ParticipantEdge>,
    Fragmentable {
  node: <T = ParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ParticipantEdgeSubscription
  extends Promise<AsyncIterator<ParticipantEdge>>,
    Fragmentable {
  node: <T = ParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateParticipant {
  count: Int;
}

export interface AggregateParticipantPromise
  extends Promise<AggregateParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParticipantSubscription
  extends Promise<AsyncIterator<AggregateParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SuperStar {
  id: ID_Output;
  fullname: String;
  image: String;
  dateOfBirth?: String;
  country?: String;
  bio: String;
  category: Category;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuperStarPromise extends Promise<SuperStar>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullname: () => Promise<String>;
  image: () => Promise<String>;
  dateOfBirth: () => Promise<String>;
  country: () => Promise<String>;
  bio: () => Promise<String>;
  category: () => Promise<Category>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuperStarSubscription
  extends Promise<AsyncIterator<SuperStar>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullname: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Category>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuperStarNullablePromise
  extends Promise<SuperStar | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullname: () => Promise<String>;
  image: () => Promise<String>;
  dateOfBirth: () => Promise<String>;
  country: () => Promise<String>;
  bio: () => Promise<String>;
  category: () => Promise<Category>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuperStarConnection {
  pageInfo: PageInfo;
  edges: SuperStarEdge[];
}

export interface SuperStarConnectionPromise
  extends Promise<SuperStarConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SuperStarEdge>>() => T;
  aggregate: <T = AggregateSuperStarPromise>() => T;
}

export interface SuperStarConnectionSubscription
  extends Promise<AsyncIterator<SuperStarConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SuperStarEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSuperStarSubscription>() => T;
}

export interface SuperStarEdge {
  node: SuperStar;
  cursor: String;
}

export interface SuperStarEdgePromise
  extends Promise<SuperStarEdge>,
    Fragmentable {
  node: <T = SuperStarPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SuperStarEdgeSubscription
  extends Promise<AsyncIterator<SuperStarEdge>>,
    Fragmentable {
  node: <T = SuperStarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSuperStar {
  count: Int;
}

export interface AggregateSuperStarPromise
  extends Promise<AggregateSuperStar>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSuperStarSubscription
  extends Promise<AsyncIterator<AggregateSuperStar>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: Category;
  title: String;
  icon?: String;
  route: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Category>;
  title: () => Promise<String>;
  icon: () => Promise<String>;
  route: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<Category>>;
  title: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  route: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  _id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParticipantSubscriptionPayload {
  mutation: MutationType;
  node: Participant;
  updatedFields: String[];
  previousValues: ParticipantPreviousValues;
}

export interface ParticipantSubscriptionPayloadPromise
  extends Promise<ParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParticipantPreviousValuesPromise>() => T;
}

export interface ParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParticipantPreviousValuesSubscription>() => T;
}

export interface ParticipantPreviousValues {
  id: ID_Output;
  groupId: ID_Output;
  groupName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ParticipantPreviousValuesPromise
  extends Promise<ParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  groupId: () => Promise<ID_Output>;
  groupName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<ParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  groupId: () => Promise<AsyncIterator<ID_Output>>;
  groupName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  image: String;
  caption: String;
  description: String;
  category: Category;
  isFeatured?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  image: () => Promise<String>;
  caption: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<Category>;
  isFeatured: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  image: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Category>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuperStarSubscriptionPayload {
  mutation: MutationType;
  node: SuperStar;
  updatedFields: String[];
  previousValues: SuperStarPreviousValues;
}

export interface SuperStarSubscriptionPayloadPromise
  extends Promise<SuperStarSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SuperStarPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SuperStarPreviousValuesPromise>() => T;
}

export interface SuperStarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SuperStarSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SuperStarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SuperStarPreviousValuesSubscription>() => T;
}

export interface SuperStarPreviousValues {
  id: ID_Output;
  fullname: String;
  image: String;
  dateOfBirth?: String;
  country?: String;
  bio: String;
  category: Category;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuperStarPreviousValuesPromise
  extends Promise<SuperStarPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullname: () => Promise<String>;
  image: () => Promise<String>;
  dateOfBirth: () => Promise<String>;
  country: () => Promise<String>;
  bio: () => Promise<String>;
  category: () => Promise<Category>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuperStarPreviousValuesSubscription
  extends Promise<AsyncIterator<SuperStarPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullname: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Category>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email?: String;
  avatar?: String;
  facebookID?: String;
  googleID?: String;
  permission?: Permission;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  avatar: () => Promise<String>;
  facebookID: () => Promise<String>;
  googleID: () => Promise<String>;
  permission: () => Promise<Permission>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  facebookID: () => Promise<AsyncIterator<String>>;
  googleID: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<Permission>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "SuperStar",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Participant",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
